export const programs = {
    html: [
      {
        name: "Основы HTML и структуры документа",
        lessons: [
          "Введение в HTML",
          "Теги и их структура",
          "Базовый документ HTML"
        ]
      },
      {
        name: "Работа с текстом",
        lessons: [
          "Заголовки и абзацы",
          "Списки",
          "Теги для текста",
          "Цитаты и блоки кода",
          "Разделение контента"
        ]
      },
      {
        name: "Работа с изображениями и мультимедиа",
        lessons: [
          "Вставка изображений",
          "Работа с аудио",
          "Вставка видео",
          "Ссылки на мультимедиа"
        ]
      },
      {
        name: "Ссылки и навигация",
        lessons: [
          "Создание ссылок",
          "Создание навигации",
          "Ссылки на внешние ресурсы"
        ]
      },
      {
        name: "Таблицы",
        lessons: [
          "Основы таблиц",
          "Стилизация таблиц",
          "Таблицы с вложенными элементами"
        ]
      },
      {
        name: "Работа с формами",
        lessons: [
          "Основы форм",
          "Поле ввода текста",
          "Чекбоксы и радиокнопки",
          "Селекты и списки",
          "Текстовые области",
          "Кнопки и отправка формы",
          "Валидация формы",
          "Работа с файлами"
        ]
      },
      {
        name: "Семантические теги HTML5",
        lessons: [
          "Что такое семантические теги?",
          "Теги для разметки страниц",
          "Тег <figure> и <figcaption>",
          "Тег <details> и <summary>"
        ]
      },
      {
        name: "Работа с мета-тегами и документами",
        lessons: [
          "Мета-теги",
          "Подключение внешних файлов",
          "Работа с фавиконками"
        ]
      },
      {
        name: "Местоположение и работа с данными",
        lessons: [
          "Геолокация HTML5",
          "Работа с веб-форматами данных",
          "Хранение данных в браузере"
        ]
      },
      {
        name: "Современные возможности HTML5",
        lessons: [
          "Сохранение данных с помощью IndexedDB",
          "Web Workers",
          "Drag and Drop API"
        ]
      },
      {
        name: "Продвинутые концепции и интеграция с другими технологиями",
        lessons: [
          "Интеграция HTML с CSS и JavaScript",
          "Микроразметка (Schema.org)",
          "Встраивание сторонних элементов",
          "Взаимодействие с внешними API"
        ]
      },
      {
        name: "Финальные шаги",
        lessons: [
          "Оптимизация HTML-кода",
          "Тестирование и отладка HTML-документов",
          "Лучшие практики разработки на HTML"
        ]
      }
    ],
    css: [
      {
        name: "Основы CSS",
        lessons: [
          "Что такое CSS?",
          "Подключение CSS к HTML",
          "Типы селекторов (универсальные, по ID, по классу)",
          "Стилизация текста (цвет, шрифт, размер)",
          "Работа с цветами в CSS (rgb, rgba, hsl)",
          "Мобильная стилизация с помощью CSS",
          "Типы отображения: inline, block, inline-block",
          "Блоки и отступы: margin, padding",
          "Границы и рамки: border",
          "Размеры: width, height, min/max-width, min/max-height"
        ]
      },
      {
        name: "Позиционирование элементов",
        lessons: [
          "Позиционирование: static, relative, absolute, fixed, sticky",
          "Использование z-index",
          "Позиционирование с использованием flexbox",
          "Позиционирование с использованием grid",
          "Отступы с позиционированием",
          "Позиционирование фона и изображений",
          "Решение проблем с позиционированием элементов"
        ]
      },
      {
        name: "Работа с фонами и изображениями",
        lessons: [
          "Подключение фонов (background-color, background-image)",
          "Градиенты: линейные и радиальные",
          "Фоны с изображениями: size, position, repeat",
          "Оптимизация изображений для веба",
          "Псевдоэлементы :before и :after для фонов",
          "Применение фильтров к изображениям",
          "Работа с фонами на всех разрешениях"
        ]
      },
      {
        name: "Работа с текстом",
        lessons: [
          "Выравнивание текста: text-align",
          "Межстрочные интервалы: line-height",
          "Размеры и стили текста: font-size, font-weight",
          "Шрифты: подключение Google Fonts, web-safe шрифты",
          "Модернизация текста: text-transform, text-decoration",
          "Отступы для текста: text-indent, letter-spacing",
          "Управление абзацами и строками",
          "Реализация списков: ul, ol, li, стилизация"
        ]
      },
      {
        name: "Стилизация ссылок и кнопок",
        lessons: [
          "Стилизация ссылок: color, text-decoration",
          "Псевдоклассы для ссылок: :hover, :focus, :visited, :active",
          "Работа с кнопками: background, border, padding, box-shadow",
          "Стилизация иконок с использованием font-awesome и svg",
          "Анимация нажатия и плавные переходы для кнопок",
          "Кнопки с использованием flexbox"
        ]
      },
      {
        name: "Работа с таблицами",
        lessons: [
          "Основы работы с таблицами",
          "Стилизация таблиц: borders, spacing",
          "Использование колонтитулов: thead, tbody, tfoot",
          "Объединение ячеек: colspan, rowspan",
          "Работа с таблицами для адаптивного дизайна",
          "Таблицы с вложенными элементами"
        ]
      },
      {
        name: "Формы и элементы управления",
        lessons: [
          "Основы работы с формами",
          "Стилизация input, textarea, select",
          "Стилизация кнопок отправки формы",
          "Адаптивные формы: ширина, отступы, поля ввода",
          "Псевдоклассы для форм: :focus, :valid, :invalid",
          "Работа с чекбоксами, радиокнопками и переключателями"
        ]
      },
      {
        name: "Семантические и адаптивные элементы",
        lessons: [
          "Использование семантических тегов: <header>, <footer>, <article>, <section>",
          "Адаптивный дизайн с помощью media queries",
          "Мобильный дизайн: отступы, размеры, шрифты",
          "Гибкие изображения с использованием max-width: 100%",
          "Использование Viewport Units (vw, vh)",
          "Сеточные системы и использование flexbox"
        ]
      },
      {
        name: "Медиа-запросы и адаптивность",
        lessons: [
          "Основы медиа-запросов: @media",
          "Применение медиа-запросов для различных устройств",
          "Параметры медиа-запросов: min-width, max-width",
          "Проектирование интерфейсов для мобильных и десктопных устройств",
          "Адаптация изображения для разных устройств",
          "Мобильные фишки: touch-events, viewport"
        ]
      },
      {
        name: "Сложные CSS-свойства",
        lessons: [
          "Тени и фильтры: box-shadow, text-shadow, filter",
          "Трансформации и анимации: transform, rotate, scale",
          "Трансitions: плавные переходы",
          "CSS Grid: основы, работа с ячейками и колонками",
          "Flexbox: основы, выравнивание, распределение пространства",
          "Создание многоколоночных макетов с grid и flexbox"
        ]
      },
      {
        name: "Продвинутые техники CSS",
        lessons: [
          "CSS-переменные: декларация и использование",
          "Псевдоклассы и псевдоэлементы: :before, :after, :first-child",
          "Техники использования `position: sticky`",
          "Сложные адаптивные макеты",
          "Модальные окна и всплывающие элементы",
          "Реализация параллакс-эффекта"
        ]
      },
      {
        name: "Препроцессоры и постпроцессоры CSS",
        lessons: [
          "Введение в SASS и SCSS",
          "Переменные и вложенность в SASS",
          "Миксины, функции и наследование в SASS",
          "Постпроцессоры: Autoprefixer, CSSnano",
          "Подключение и использование SASS в проектах"
        ]
      },
      {
        name: "Работа с CSS-фреймворками",
        lessons: [
          "Знакомство с CSS-фреймворками: Bootstrap, Foundation, Tailwind",
          "Создание макетов с использованием Tailwind CSS",
          "Стилизация элементов с помощью utility-классов",
          "Адаптивные компоненты с Tailwind",
          "Использование системы сеток в Bootstrap",
          "Custom компоненты и стилизация с Bootstrap"
        ]
      },
      {
        name: "Финальные шаги",
        lessons: [
          "Оптимизация CSS-кода",
          "Методы тестирования и отладки CSS",
          "Использование инструментов разработчика в браузере для отладки CSS",
          "CSS-анимations: практическое применение",
          "Подключение и использование CDN для стилизации",
          "Лучшие практики написания чистого CSS"
        ]
      }
    ],
    javascript: [
      {
        name: "Основы JavaScript",
        lessons: [
          "Что такое JavaScript?",
          "Как подключить JavaScript к HTML",
          "Переменные: var, let, const",
          "Типы данных: числа, строки, булевы значения",
          "Константы и переменные",
          "Операторы: арифметические, логические, сравнения",
          "Условные конструкции: if, else, else if",
          "Циклы: for, while, do...while",
          "Функции: объявление, вызов, параметры, возвращаемые значения",
          "Области видимости: глобальная, локальная"
        ]
      },
      {
        name: "Массивы и объекты",
        lessons: [
          "Что такое массивы и как их создавать?",
          "Доступ к элементам массива",
          "Методы массивов: push, pop, shift, unshift",
          "Перебор массивов: for, forEach, map, filter, reduce",
          "Многомерные массивы",
          "Объекты: создание, доступ к свойствам, методы объектов",
          "Методы объектов: Object.keys, Object.values, Object.entries",
          "Деструктуризация массивов и объектов",
          "Глубокое копирование объектов",
          "Метод .bind()"
        ]
      },
      {
        name: "Работа с функциями",
        lessons: [
          "Объявление функции и вызов",
          "Функции как объекты",
          "Функции с параметрами по умолчанию",
          "Замыкания (Closures)",
          "Анонимные функции",
          "Стрелочные функции (Arrow functions)",
          "Функции высшего порядка",
          "Функции как аргументы и возвращаемые значения",
          "Модификаторы доступа: private и public методы",
          "Рекурсия"
        ]
      },
      {
        name: "Прототипы и наследование",
        lessons: [
          "Что такое прототипы?",
          "Объект `Object` и его методы",
          "Наследование в JavaScript",
          "Прототипное наследование",
          "Методы .call(), .apply() и .bind()",
          "Создание классов в JavaScript",
          "Конструкторы и создание экземпляров",
          "Наследование классов",
          "Методы и геттеры/сеттеры в классах",
          "Абстрактные классы"
        ]
      },
      {
        name: "Асинхронность и работа с промисами",
        lessons: [
          "Что такое асинхронность?",
          "Объект `Promise` и его методы",
          "Создание и работа с промисами",
          "Методы .then() и .catch()",
          "Цепочки промисов",
          "Обработка ошибок в промисах",
          "async/await: синтаксис и использование",
          "Ошибка в обработке промисов и отладка",
          "Параллельные промисы: Promise.all() и Promise.race()",
          "Асинхронные функции и их особенности"
        ]
      },
      {
        name: "Работа с DOM",
        lessons: [
          "Что такое DOM?",
          "Как получить элементы с помощью getElementById, querySelector",
          "Изменение свойств элементов (textContent, innerHTML)",
          "Манипуляции с аттрибутами элементов",
          "Создание новых элементов и добавление их в DOM",
          "Обработчики событий: addEventListener",
          "Обработка событий: mouse, keyboard, input",
          "События всплытия и перехвата",
          "Делегирование событий",
          "Анимации с использованием JavaScript"
        ]
      },
      {
        name: "Работа с формами и валидация",
        lessons: [
          "Обработка событий на формах",
          "Получение значений из input, select, textarea",
          "Валидация формы с использованием JavaScript",
          "Проверка обязательных полей",
          "Проверка данных на соответствие формату (email, телефон)",
          "Использование регулярных выражений",
          "Динамическое изменение содержимого формы",
          "Предотвращение отправки формы с ошибками",
          "Управление кнопками отправки и отмены",
          "Создание кастомных ошибок валидации"
        ]
      },
      {
        name: "Модули и работа с файлами",
        lessons: [
          "Что такое модули в JavaScript?",
          "Экспорт и импорт модулей",
          "Работа с глобальными и локальными модулями",
          "Использование систем сборки: Webpack, Babel",
          "Работа с файловой системой через File API",
          "Загрузка и чтение файлов с помощью JavaScript",
          "Использование LocalStorage и SessionStorage",
          "Cookies и их использование",
          "Обработка ошибок с использованием try/catch",
          "Работа с JSON: преобразование данных в строку и обратно"
        ]
      },
      {
        name: "Работа с API и Fetch",
        lessons: [
          "Что такое API?",
          "Принципы работы с REST API",
          "Метод `fetch()`: основы и синтаксис",
          "Получение данных с помощью fetch() и .then()",
          "Методы GET, POST, PUT, DELETE",
          "Отправка данных на сервер с использованием fetch",
          "Обработка ошибок с использованием try/catch",
          "Работа с JSON и преобразование данных",
          "Интерфейс XMLHttpRequest (XHR)",
          "Получение данных с серверов в реальном времени (AJAX)"
        ]
      },
      {
        name: "Типы данных и типизация",
        lessons: [
          "Основные типы данных в JavaScript",
          "Типы данных: примитивы и объекты",
          "Преобразование типов данных (типизация)",
          "Неявное и явное преобразование типов",
          "Равенство в JavaScript: == vs ===",
          "Особенности NaN и Infinity",
          "Проверка типов с помощью typeof и instanceof",
          "Строки и регулярные выражения",
          "Массивы и их методы",
          "Преобразование массивов и объектов"
        ]
      },
      {
        name: "Модернизация JavaScript: ES6+",
        lessons: [
          "Стрелочные функции",
          "Шаблонные строки",
          "Деструктуризация объектов и массивов",
          "Множества (Set) и карты (Map)",
          "Spread и Rest операторы",
          "Модули (ES Modules)",
          "async/await (синхронная асинхронность)",
          "Классы и наследование в JavaScript",
          "Микроскопические объекты: WeakMap и WeakSet",
          "Методы для работы с массивами (map, filter, reduce)"
        ]
      },
      {
        name: "Работа с браузерными API",
        lessons: [
          "Работа с браузерными событиями",
          "Навигация и управление страницами с помощью History API",
          "Работа с геолокацией: Geolocation API",
          "Web Storage API: LocalStorage, SessionStorage",
          "Работа с WebSockets",
          "Push-уведомления",
          "Clipboard API",
          "Service Workers и Progressive Web Apps",
          "Audio и Video API",
          "Canvas API для рисования"
        ]
      },
      {
        name: "Продвинутые темы JavaScript",
        lessons: [
          "Микротаски и макротаски в JavaScript",
          "Понимание Event Loop",
          "Оптимизация производительности JavaScript",
          "Web Workers для многозадачности",
          "Методы для работы с большими объемами данных",
          "Паттерны проектирования в JavaScript",
          "Протоколы HTTP/2 и WebSockets",
          "Обработка ошибок и отладка",
          "Методы и функции для работы с большими объемами данных",
          "Использование слабых и сильных ссылок"
        ]
      },
      {
        name: "Финальные шаги",
        lessons: [
          "Оптимизация JavaScript кода",
          "Тестирование JavaScript кода: Unit тесты и инструменты",
          "Использование DevTools для отладки",
          "Решение проблем с производительностью",
          "Подключение внешних библиотек и фреймворков",
          "Лучшие практики и паттерны разработки",
          "Документирование и написание чистого кода",
          "Работа в команде: Git и GitHub",
          "Подготовка к работе с React и другими фронтенд-фреймворками"
        ]
      }
    ],
    git: [
      {
        name: "Основы Git и версия контроля",
        lessons: [
          "Введение в Git и систему контроля версий",
          "Установка Git и настройка рабочего окружения",
          "Основные команды Git: git init, git status, git add, git commit",
          "Работа с репозиториями: создание, клонирование, удаление",
          "Основы отслеживания изменений: создание и управление коммитами",
          "Работа с ветками: создание, удаление, переключение"
        ]
      },
      {
        name: "Работа с ветками и слияние",
        lessons: [
          "Что такое ветки и зачем они нужны?",
          "Создание и удаление веток: git branch, git checkout",
          "Переключение между ветками: git switch",
          "Объединение веток: git merge, конфликт слияния",
          "Решение конфликтов при слиянии",
          "Git rebase: что это и когда использовать",
          "Просмотр истории изменений: git log, git diff"
        ]
      },
      {
        name: "Работа с удалёнными репозиториями",
        lessons: [
          "Что такое удалённые репозитории?",
          "Подключение к удалённому репозиторию: git remote, git clone",
          "Отправка изменений на сервер: git push",
          "Получение изменений с удалённого репозитория: git pull, git fetch",
          "Удаление удалённого репозитория и очистка ссылок: git remote remove",
          "Работа с несколькими удалёнными репозиториями",
          "Git fetch vs git pull: разница и когда использовать"
        ]
      },
      {
        name: "Управление версиями и историями коммитов",
        lessons: [
          "Просмотр истории с помощью git log",
          "Git revert: отмена изменений в истории",
          "Git reset: откат изменений в рабочем каталоге и индексах",
          "Работа с тегами: создание, удаление, просмотр тегов",
          "Использование git bisect для поиска ошибок в истории",
          "Как изменить прошлые коммиты: git commit --amend, git rebase -i",
          "Работа с подмодулями Git"
        ]
      },
      {
        name: "GitHub и удалённые репозитории",
        lessons: [
          "Что такое GitHub и как он работает?",
          "Создание и настройка репозитория на GitHub",
          "Работа с Pull Request: создание, обсуждение и слияние",
          "Forking и создание Pull Request: как работать с чужими репозиториями",
          "Решение конфликтов с Pull Request",
          "GitHub Actions и CI/CD: автоматизация рабочих процессов",
          "Настройка прав доступа и разрешений на GitHub",
          "Секреты безопасности на GitHub: управление SSH-ключами"
        ]
      },
      {
        name: "Продвинутые техники Git",
        lessons: [
          "Использование Git Submodules и Git Subtree для работы с большими проектами",
          "Git stash: сохранение и восстановление изменений",
          "Git cherry-pick: выборочное слияние коммитов",
          "Git reflog: восстановление потерянных данных",
          "Интерфейсы Git: работа с графическими интерфейсами и расширениями",
          "Git hook: автоматизация процессов с помощью хуков",
          "Git workflows: GitFlow, GitHub Flow и другие модели рабочего процесса"
        ]
      },
      {
        name: "Работа с большими репозиториями и оптимизация",
        lessons: [
          "Проблемы при работе с большими репозиториями",
          "Оптимизация истории коммитов: git gc и другие инструменты",
          "Использование Git LFS для работы с большими файлами",
          "Как управлять большими репозиториями и файлами на GitHub",
          "Работа с большими бинарными файлами в Git",
          "Управление зависимостями и рабочими деревьями",
          "Решение проблем с производительностью в Git"
        ]
      },
      {
        name: "Лучшие практики и рабочие процессы с Git",
        lessons: [
          "Рекомендации по структуре репозитория и организации веток",
          "Использование Git для командной работы: подходы и стратегии",
          "Git hooks для автоматизации и интеграции с другими инструментами",
          "Тестирование и проверка кода перед коммитами",
          "Решение конфликтов слияния и стратегии для минимизации конфликтов",
          "Поддержка чистоты истории коммитов",
          "Git в DevOps и CI/CD пайплайнах",
          "Безопасность при работе с Git и GitHub"
        ]
      },
      {
        name: "Финальные шаги и отладка Git",
        lessons: [
          "Как отлаживать ошибки при работе с Git",
          "Использование инструментов и команд для диагностики проблем",
          "Оптимизация процесса работы с Git в команде",
          "Решение распространенных проблем Git",
          "Подготовка репозитория к публикации",
          "Лучшие практики ведения истории изменений и работы с ветками",
          "Git и код-ревью: эффективные стратегии"
        ]
      }
    ],
    tailwind: [
      {
        name: "Основы Tailwind CSS",
        lessons: [
          "Что такое Tailwind CSS?",
          "Как подключить Tailwind CSS к проекту",
          "Основные классы Tailwind: утилитарные классы",
          "Использование классов для фоновых цветов, шрифтов и отступов",
          "Работа с размерами и размерами шрифтов",
          "Типы отображения: block, inline, inline-block",
          "Позиционирование с Tailwind",
          "Применение отступов и паддингов",
          "Использование классов для работы с текстом: text-color, text-align, font-size",
          "Применение рамок и границ"
        ]
      },
      {
        name: "Гибкость и сетки в Tailwind",
        lessons: [
          "Основы Flexbox в Tailwind",
          "Сетки с использованием Tailwind: grid-template-columns, grid-template-rows",
          "Позиционирование элементов с помощью flex: justify-content, align-items",
          "Использование grid для создания макетов",
          "Выравнивание элементов внутри контейнера с помощью Tailwind",
          "Работа с колонками и строками в grid",
          "Автоматическое распределение элементов в контейнере",
          "Работа с wrap, order и другие возможности Flexbox"
        ]
      },
      {
        name: "Адаптивный дизайн с Tailwind",
        lessons: [
          "Основы адаптивного дизайна в Tailwind",
          "Медиа-запросы и брейкпоинты в Tailwind",
          "Как настроить Tailwind для мобильных устройств",
          "Использование мобильных классов: sm, md, lg, xl",
          "Адаптация сеток и flexbox для различных устройств",
          "Изменение свойств для разных экранов с помощью классов",
          "Использование утилитарных классов для адаптивных изменений",
          "Создание адаптивных макетов с помощью Tailwind"
        ]
      },
      {
        name: "Работа с фонами и изображениями в Tailwind",
        lessons: [
          "Основы работы с фоновыми изображениями и цветами",
          "Использование классов для задания фонов: bg-color, bg-image",
          "Применение градиентов с Tailwind",
          "Настройка фона для разных разрешений",
          "Работа с размерами изображений и их расположением",
          "Использование `object-fit`, `object-position` для изображений",
          "Мобильная оптимизация фонов"
        ]
      },
      {
        name: "Стилизация текста и шрифтов в Tailwind",
        lessons: [
          "Использование классов для стилизации текста",
          "Шрифты: подключение и использование с Tailwind",
          "Основные классы для стилизации текста: text-size, font-family, font-weight",
          "Настройка межстрочного интервала и высоты строки",
          "Использование текстовых стилей: uppercase, lowercase, capitalize",
          "Классы для работы с текстовыми декорациями: underline, line-through",
          "Стилизация абзацев и заголовков"
        ]
      },
      {
        name: "Псевдоклассы и псевдоэлементы в Tailwind",
        lessons: [
          "Использование псевдоклассов в Tailwind: hover, focus, active",
          "Псевдоклассы для текста и фонов: hover:text-color, focus:outline-none",
          "Создание анимаций с использованием псевдоклассов",
          "Работа с псевдоэлементами: before и after в Tailwind",
          "Стилизация кнопок и ссылок с псевдоклассами"
        ]
      },
      {
        name: "Работа с формами в Tailwind",
        lessons: [
          "Основы работы с формами в Tailwind",
          "Стилизация полей ввода: input, textarea, select",
          "Работа с кнопками формы",
          "Стилизация чекбоксов и радиокнопок",
          "Создание адаптивных форм с Tailwind",
          "Работа с состояниями форм: focus, disabled, checked",
          "Использование классов для оформления ошибок и уведомлений"
        ]
      },
      {
        name: "Анимации и трансформации с Tailwind",
        lessons: [
          "Основы анимаций в Tailwind",
          "Использование классов для анимаций: transition, duration, ease",
          "Трансформации элементов с Tailwind: scale, rotate, translate",
          "Анимации появления и скрытия элементов",
          "Создание сложных анимаций и переходов",
          "Использование @keyframes для кастомных анимаций"
        ]
      },
      {
        name: "Продвинутые возможности Tailwind CSS",
        lessons: [
          "Создание кастомных классов и конфигурации Tailwind",
          "Использование Tailwind CSS с SCSS и SASS",
          "Работа с динамическими классами и условными стилями",
          "Tailwind JIT (Just-In-Time) режим для ускорения сборки",
          "Оптимизация производительности с Tailwind",
          "Использование плагинов для расширения функционала Tailwind",
          "Настройка тем и кастомных цветов"
        ]
      },
      {
        name: "Работа с Tailwind CSS в реальных проектах",
        lessons: [
          "Как интегрировать Tailwind в существующий проект",
          "Использование Tailwind с фреймворками (Vue.js, React, Angular)",
          "Работа с Tailwind CSS и сторонними библиотеками",
          "Создание адаптивных интерфейсов с Tailwind",
          "Модуляризация стилей с Tailwind в больших проектах",
          "Лучшие практики использования Tailwind"
        ]
      },
      {
        name: "Финальные шаги и отладка в Tailwind",
        lessons: [
          "Отладка и решение проблем с Tailwind",
          "Тестирование и оптимизация проекта с Tailwind",
          "Как сжать и минимизировать файлы с Tailwind",
          "Подключение Tailwind CSS в процессе разработки",
          "Лучшие практики разработки с Tailwind CSS",
          "Подготовка к работе с другими фронтенд-фреймворками"
        ]
      }
    ],
    nodejs: [
      {
        name: "Введение в Node.js",
        lessons: [
          "Что такое Node.js?",
          "Установка и настройка Node.js",
          "Основы работы с Node.js: CLI, REPL",
          "Что такое NPM и как с ним работать?",
          "Основы асинхронного программирования в Node.js",
          "Основы событийной модели в Node.js"
        ]
      },
      {
        name: "Модули и пакеты в Node.js",
        lessons: [
          "Что такое модули в Node.js?",
          "Создание и использование собственных модулей",
          "Подключение и работа с встроенными модулями (fs, http, path, os и др.)",
          "Управление зависимостями с помощью NPM",
          "Работа с глобальными и локальными пакетами",
          "Публикация пакетов на NPM"
        ]
      },
      {
        name: "Асинхронное программирование в Node.js",
        lessons: [
          "Основы асинхронности: Callback-и, промисы и async/await",
          "Работа с асинхронными операциями в Node.js",
          "Реализация асинхронных функций и обработка ошибок",
          "Event Loop и его роль в Node.js",
          "Параллельное выполнение: Promise.all(), Promise.race()",
          "Реализация отложенных функций и таймеров"
        ]
      },
      {
        name: "Работа с файловой системой",
        lessons: [
          "Основы работы с файловой системой с использованием модуля fs",
          "Чтение и запись файлов: синхронные и асинхронные операции",
          "Работа с директориями и файлами",
          "Работа с потоками: Readable и Writable Streams",
          "Чтение больших файлов с использованием потоков",
          "Использование библиотеки `path` для работы с путями файлов"
        ]
      },
      {
        name: "Создание HTTP-сервера в Node.js",
        lessons: [
          "Основы HTTP и создание HTTP-сервера",
          "Обработка запросов и ответов: GET, POST, PUT, DELETE",
          "Работа с URL-параметрами и query строками",
          "Обработка ошибок HTTP-сервера",
          "Использование middleware для обработки запросов",
          "Настройка HTTP-сервера для работы с REST API"
        ]
      },
      {
        name: "Работа с базами данных",
        lessons: [
          "Что такое базы данных и как с ними работать в Node.js?",
          "Основы работы с SQL (MySQL, PostgreSQL) в Node.js",
          "Подключение к базе данных через ORM (Sequelize)",
          "Работа с MongoDB и библиотекой Mongoose",
          "Выполнение операций CRUD с использованием Node.js и базы данных",
          "Основы миграций и работы с данными"
        ]
      },
      {
        name: "WebSocket и реальное время",
        lessons: [
          "Основы WebSocket и принцип работы",
          "Создание WebSocket сервера в Node.js",
          "Обмен данными между клиентом и сервером в реальном времени",
          "Использование библиотеки `socket.io` для работы с WebSockets",
          "Реализация чатов и уведомлений в реальном времени",
          "Обработка ошибок и оптимизация работы с WebSocket"
        ]
      },
      {
        name: "Express.js — веб-фреймворк для Node.js",
        lessons: [
          "Что такое Express.js и как его установить?",
          "Основы маршрутизации в Express.js",
          "Работа с middleware и создание кастомных middleware-функций",
          "Обработка запросов и ответов: JSON, формы, файлы",
          "Создание REST API с использованием Express.js",
          "Подключение и настройка базы данных в Express.js"
        ]
      },
      {
        name: "Тестирование в Node.js",
        lessons: [
          "Основы тестирования в Node.js",
          "Подключение и использование Mocha для тестирования",
          "Создание юнит-тестов с использованием Chai",
          "Интеграционное тестирование с Supertest",
          "Тестирование REST API",
          "Использование Jest для тестирования Node.js приложений"
        ]
      },
      {
        name: "Аутентификация и безопасность",
        lessons: [
          "Основы аутентификации и авторизации в Node.js",
          "Использование JSON Web Tokens (JWT)",
          "Работа с OAuth2 и социальными авторизациями",
          "Защита приложений от атак: CSRF, XSS, SQL-инъекции",
          "Шифрование паролей с использованием bcrypt",
          "Реализация аутентификации с помощью Passport.js"
        ]
      },
      {
        name: "Микросервисы и архитектура приложений",
        lessons: [
          "Что такое микросервисы и когда их использовать?",
          "Основы создания микросервисной архитектуры",
          "Взаимодействие микросервисов через REST API",
          "Основы Docker и создание контейнеров для микросервисов",
          "Оркестрация контейнеров с помощью Kubernetes",
          "Работа с API Gateway в микросервисах"
        ]
      },
      {
        name: "Продвинутые темы Node.js",
        lessons: [
          "Основы многозадачности и работы с процессами в Node.js",
          "Web Workers и их использование в Node.js",
          "Оптимизация производительности Node.js приложений",
          "Управление памятью и утечками памяти",
          "Использование Clustering для повышения производительности",
          "Логирование и мониторинг в Node.js"
        ]
      },
      {
        name: "Развертывание Node.js приложений",
        lessons: [
          "Развертывание приложений на сервере",
          "Работа с облачными платформами: AWS, Heroku, DigitalOcean",
          "Настройка CI/CD для Node.js приложений",
          "Использование Nginx в качестве обратного прокси для Node.js",
          "Оптимизация развертывания и масштабирование приложений",
          "Работа с контейнерами и Kubernetes для продакшн-окружений"
        ]
      },
      {
        name: "Финальные шаги и лучшие практики",
        lessons: [
          "Паттерны проектирования в Node.js приложениях",
          "Методы повышения производительности и масштабируемости",
          "Лучшие практики написания чистого и поддерживаемого кода",
          "Работа в команде с использованием Git и GitHub",
          "Документирование кода и создание API документации",
          "Подготовка к собеседованиям и тестированию знаний"
        ]
      }
    ],
    react: [
      {
        name: "Введение в React",
        lessons: [
          "Что такое React и зачем он нужен?",
          "Установка и настройка окружения для разработки на React",
          "Основы JSX: синтаксис и правила",
          "Создание первого компонента",
          "Рендеринг компонентов в DOM",
          "Реактивные компоненты: как React обновляет UI",
          "Компоненты и их структура: классовые и функциональные компоненты"
        ]
      },
      {
        name: "Компоненты и пропсы",
        lessons: [
          "Что такое компоненты в React?",
          "Передача данных через пропсы",
          "Типы пропсов и их валидация",
          "Рисование компонентов с использованием пропсов",
          "Композиция компонентов: родительские и дочерние компоненты",
          "Дефолтные значения пропсов",
          "Обработка ошибок при передаче пропсов"
        ]
      },
      {
        name: "Состояние (State) и управление состоянием",
        lessons: [
          "Что такое состояние компонента (state)?",
          "Использование useState для работы с состоянием",
          "Обновление состояния и его влияния на рендеринг",
          "Работа с несколькими состояниями",
          "Состояние в классовых компонентах",
          "Управление состоянием на уровне компонента",
          "Передача состояния через пропсы"
        ]
      },
      {
        name: "Обработка событий",
        lessons: [
          "Как обрабатывать события в React",
          "Синтаксис обработки событий в JSX",
          "Передача параметров в обработчики событий",
          "Методы классовых компонентов для обработки событий",
          "Важность привязки контекста (this)",
          "События в функциональных компонентах с хуками"
        ]
      },
      {
        name: "Жизненный цикл компонентов",
        lessons: [
          "Что такое жизненный цикл компонента?",
          "Основные методы жизненного цикла в классовых компонентах (componentDidMount, componentDidUpdate, componentWillUnmount)",
          "Использование хука useEffect для работы с жизненным циклом в функциональных компонентах",
          "Чистые функции и их использование для оптимизации",
          "Как избежать повторных рендеров с использованием жизненного цикла",
          "Работа с асинхронными запросами в жизненном цикле компонента"
        ]
      },
      {
        name: "Хуки React",
        lessons: [
          "Что такое хуки в React?",
          "Хук useState: основа работы с состоянием",
          "Хук useEffect: работа с побочными эффектами",
          "Хук useContext: использование контекста в функциональных компонентах",
          "Хук useReducer: альтернатива useState для сложного состояния",
          "Хук useCallback: оптимизация функций и предотвращение лишних рендеров",
          "Хук useMemo: оптимизация вычислений и производительности",
          "Создание собственных хуков"
        ]
      },
      {
        name: "Роутинг в React",
        lessons: [
          "Что такое React Router и зачем он нужен?",
          "Установка и настройка React Router",
          "Основные компоненты React Router: BrowserRouter, Route, Link, NavLink",
          "Навигация между страницами с помощью React Router",
          "Передача параметров в URL с помощью маршрутов",
          "Программная навигация в React",
          "Защищённые маршруты и авторизация",
          "Реализация вложенных маршрутов"
        ]
      },
      {
        name: "Управление состоянием с использованием Context API",
        lessons: [
          "Что такое Context API и когда его использовать?",
          "Создание контекста с помощью React.createContext",
          "Передача значений через провайдер (Provider)",
          "Потребление данных из контекста с помощью Consumer",
          "Использование useContext для работы с контекстом в функциональных компонентах",
          "Отличия между локальным состоянием и состоянием через Context API",
          "Оптимизация производительности при использовании Context API"
        ]
      },
      {
        name: "Продвинутые техники работы с React",
        lessons: [
          "React.memo: оптимизация рендеринга компонентов",
          "React.lazy и Suspense: динамическая загрузка компонентов",
          "Error boundaries: обработка ошибок в React-компонентах",
          "Переход от классовых к функциональным компонентам",
          "Дебаггинг и отладка React-приложений",
          "React Profiler: инструменты для анализа производительности",
          "Оптимизация работы с большими списками (React Virtualized)"
        ]
      },
      {
        name: "Работа с API в React",
        lessons: [
          "Получение данных с сервера в React (fetch, axios)",
          "Работа с асинхронными запросами в компонентах",
          "Обработка ошибок при получении данных",
          "Динамическая загрузка данных в компоненты",
          "Управление состоянием загрузки, ошибок и данных",
          "Работа с JSON и API в реальном времени",
          "Использование useEffect для запросов к API"
        ]
      },
      {
        name: "Тестирование React-приложений",
        lessons: [
          "Введение в тестирование React-приложений",
          "Тестирование компонентов с использованием Jest и React Testing Library",
          "Мокирование данных и функций для тестов",
          "Написание юнит-тестов для компонентов и функций",
          "Тестирование асинхронных запросов в React",
          "Интеграционные тесты и тестирование взаимодействий между компонентами",
          "Тестирование хуков и контекста"
        ]
      },
      {
        name: "Производительность в React",
        lessons: [
          "Как улучшить производительность React-приложений?",
          "Оптимизация рендеринга с помощью React.memo и PureComponent",
          "Lazy loading компонентов для уменьшения размера начальной загрузки",
          "Использование виртуализации списков для оптимизации рендеринга",
          "Минимизация повторных рендеров с использованием хуков",
          "Отслеживание производительности с использованием React Profiler",
          "Мемоизация значений и функций с помощью useMemo и useCallback"
        ]
      },
      {
        name: "Продвинутые концепции и паттерны проектирования в React",
        lessons: [
          "Реактивное программирование в React: паттерны и подходы",
          "Композиция и разделение логики с использованием HOC (Higher Order Components)",
          "Реализация паттерна Render Props",
          "Использование паттерна Compound Components",
          "Работа с Observable/Redux в React-приложениях",
          "Архитектура приложения с использованием React и Redux",
          "Внедрение зависимостей в React с использованием hooks"
        ]
      },
      {
        name: "Интеграция с внешними библиотеками и фреймворками",
        lessons: [
          "Интеграция с UI-фреймворками: Material UI, Ant Design, Bootstrap",
          "Использование графиков и визуализаций с библиотеками типа D3.js, Chart.js",
          "Интеграция с картами с использованием библиотеки Leaflet или Google Maps",
          "Использование WebSocket для работы с реальным временем",
          "Интеграция с состоянием приложения через Redux или MobX",
          "Интеграция с серверными решениями: Firebase, Node.js"
        ]
      },
      {
        name: "Финальные шаги и развертывание приложения",
        lessons: [
          "Подготовка React-приложения к продакшн-сборке",
          "Оптимизация кода и уменьшение размера бандла",
          "Настройка и использование CI/CD для React-приложений",
          "Развертывание React-приложений на различных платформах (Netlify, Vercel, Heroku)",
          "Работа с Docker для контейнеризации React-приложений",
          "Лучшие практики для написания чистого и масштабируемого кода",
          "Документирование и поддержка React-приложений"
        ]
      }
    ],
    typescript: [
      {
        name: "Введение в TypeScript",
        lessons: [
          "Что такое TypeScript и как он работает?",
          "Основные отличия TypeScript от JavaScript",
          "Установка и настройка TypeScript",
          "Конфигурация TypeScript с использованием tsconfig.json",
          "Компиляция TypeScript в JavaScript",
          "Типы данных в TypeScript: string, number, boolean, any",
          "Типы данных: unknown, void, null и undefined",
          "Типы для объектов, массивов и кортежей",
          "Типы для функций и возвращаемых значений",
          "Типы для параметров функций"
        ]
      },
      {
        name: "Основные типы и конструкции",
        lessons: [
          "Типы данных: number, string, boolean, void, null, undefined",
          "Тип any и его использование",
          "Тип unknown и его отличие от any",
          "Типы для объектов и массивов",
          "Типы для кортежей",
          "Типы для функций: параметров и возвращаемых значений",
          "Объявление переменных с типами: let, const, var",
          "Типизация функции с параметрами и возвращаемыми значениями",
          "Типы для классов и интерфейсов",
          "Реализация интерфейсов и их наследование"
        ]
      },
      {
        name: "Продвинутые типы и функциональные возможности",
        lessons: [
          "Типы с объединениями (Union Types)",
          "Типы с пересечениями (Intersection Types)",
          "Типы с литеральными значениями (Literal Types)",
          "Типы с дженериками (Generics)",
          "Типы функций с дженериками",
          "Типы для объектов с дженериками",
          "Дефолтные типы для дженериков",
          "Типы с условными операторами (Conditional Types)",
          "Типы с типовыми мапами (Mapped Types)",
          "Работа с типами при наследовании"
        ]
      },
      {
        name: "Классы и объектно-ориентированное программирование",
        lessons: [
          "Основы классов в TypeScript",
          "Конструкторы и инициализация классов",
          "Методы и свойства классов",
          "Наследование классов",
          "Использование модификаторов доступа: public, private, protected",
          "Абстрактные классы и методы",
          "Интерфейсы и классы: реализация и наследование",
          "Реализация интерфейсов в классах",
          "Реализация множественного наследования с помощью интерфейсов",
          "Модификаторы readonly и const в классах"
        ]
      },
      {
        name: "Интерфейсы и типы",
        lessons: [
          "Что такое интерфейсы и зачем они нужны?",
          "Создание и использование интерфейсов",
          "Совмещение интерфейсов",
          "Обязательные и необязательные свойства интерфейсов",
          "Типы с использованием интерфейсов",
          "Наследование интерфейсов",
          "Типы для объектов и массивов с интерфейсами",
          "Объединение интерфейсов (Declaration Merging)",
          "Типы функций с интерфейсами",
          "Использование интерфейсов для классов и объектов"
        ]
      },
      {
        name: "Модули и пространство имен",
        lessons: [
          "Что такое модули в TypeScript?",
          "Экспорт и импорт модулей",
          "Модули в TypeScript и их использование",
          "Пространства имен и их отличие от модулей",
          "Экспорт и импорт элементов из пространства имен",
          "Типы и интерфейсы в модулях",
          "Работа с внешними модулями",
          "Типы для внешних модулей",
          "Использование CommonJS и ES Modules",
          "Обработка ошибок при работе с модулями"
        ]
      },
      {
        name: "Асинхронное программирование и Promise",
        lessons: [
          "Что такое асинхронное программирование?",
          "Работа с Promise в TypeScript",
          "Использование async/await в TypeScript",
          "Типы для Promise и асинхронных функций",
          "Типизация функций с промисами",
          "Ошибка в асинхронном коде и обработка исключений",
          "Работа с несколькими промисами: Promise.all() и Promise.race()",
          "Асинхронные генераторы и итераторы",
          "Обработка ошибок с использованием try/catch",
          "Типы для асинхронных функций и промисов"
        ]
      },
      {
        name: "Дженерики и универсальные типы",
        lessons: [
          "Что такое дженерики (Generics)?",
          "Объявление дженериков для функций и классов",
          "Дженерики с ограничениями (Constraints)",
          "Использование дженериков с массивами и объектами",
          "Параметры по умолчанию для дженериков",
          "Типы с дженериками в интерфейсах",
          "Дженерики и наследование классов",
          "Использование дженериков с типами и интерфейсами",
          "Совмещение дженериков с другими типами",
          "Работа с дженериками в коллекциях данных"
        ]
      },
      {
        name: "Работа с типами данных и обработка ошибок",
        lessons: [
          "Типы данных в TypeScript: как выбрать правильный тип",
          "Типы данных: boolean, number, string и их отличия",
          "Работа с типом any и его ограничения",
          "Типы данных null и undefined",
          "Ошибки типов и их обработка",
          "Типы для исключений и ошибок",
          "Типы для API и ответа от сервера",
          "Работа с регулярными выражениями и типами данных",
          "Типизация классов и интерфейсов с обработкой ошибок",
          "Использование типизации для обработки ошибок"
        ]
      },
      {
        name: "Продвинутые темы TypeScript",
        lessons: [
          "Работа с декораторами и мета-программированием",
          "Использование декораторов для классов, методов и свойств",
          "Типы для декораторов",
          "Метапрограммирование с использованием Reflect API",
          "Использование TypeScript с React и Angular",
          "Типы для React-компонентов в TypeScript",
          "Типы для Redux и стейтов в TypeScript",
          "Типизация для библиотек с помощью DefinitelyTyped",
          "Типы для Web API и библиотек",
          "Интерфейсы и типы для сторонних модулей"
        ]
      },
      {
        name: "Оптимизация и производительность TypeScript",
        lessons: [
          "Оптимизация типов и использование типов данных",
          "Как избежать избыточной типизации",
          "Отладка TypeScript кода и использование DevTools",
          "Использование TypeScript с инструментами сборки: Webpack, Babel",
          "Инструменты для проверки типов: TSLint, ESLint",
          "Анализ производительности TypeScript кода",
          "Оптимизация TypeScript в больших проектах",
          "Типы и производительность асинхронных операций",
          "Ленивая загрузка модулей и оптимизация загрузки",
          "Как выбрать правильный тип для обеспечения производительности"
        ]
      },
      {
        name: "Финальные шаги и лучшие практики",
        lessons: [
          "Подведение итогов и лучшие практики TypeScript",
          "Стратегии типизации и выбор правильных типов",
          "Советы по улучшению качества кода в TypeScript",
          "Типы и дизайн API",
          "Документирование и поддержка кода",
          "Типизация в команде: совместная работа с TypeScript",
          "Подготовка к работе с TypeScript в реальных проектах",
          "Рекомендации по улучшению производительности и поддерживаемости кода",
          "Оптимизация TypeScript кода для больших приложений",
          "Как использовать TypeScript с другими фронтенд-фреймворками"
        ]
      }
    ],
    redux: [
      {
        name: "Введение в Redux",
        lessons: [
          "Что такое Redux и зачем он нужен?",
          "Основные принципы Redux: Store, Actions, Reducers",
          "Понимание потока данных в Redux",
          "Установка и настройка Redux в проекте",
          "Создание простого Redux хранилища",
          "Использование Redux DevTools"
        ]
      },
      {
        name: "Actions и Action Creators",
        lessons: [
          "Что такое Action в Redux?",
          "Типы Actions и их использование",
          "Создание Action Creators",
          "Диспатчинг Action в Redux",
          "Применение Action Creators для работы с состоянием"
        ]
      },
      {
        name: "Reducers",
        lessons: [
          "Что такое Reducer и как он работает?",
          "Как написать Reducer для обработки действий",
          "Типы Reducers: чистые и мутирующие",
          "Комбинированные Reducers с помощью combineReducers",
          "Поддержка состояния через Reducers"
        ]
      },
      {
        name: "State и Store",
        lessons: [
          "Что такое Store в Redux?",
          "Создание и подключение Store",
          "Доступ к состоянию через Store",
          "Методы Store: getState(), dispatch(), subscribe()",
          "Подключение Store к компонентам React"
        ]
      },
      {
        name: "Мидлвары и асинхронность",
        lessons: [
          "Что такое мидлвары в Redux?",
          "Использование Redux Thunk для асинхронных действий",
          "Пример использования Redux Thunk для работы с API",
          "Redux Saga: основы и преимущества",
          "Мидлвар для логирования действий"
        ]
      },
      {
        name: "Подключение Redux с React",
        lessons: [
          "Подключение Redux Store к React приложению",
          "Использование connect для связи Redux с компонентами",
          "Использование useDispatch и useSelector с React Redux",
          "Передача данных в компоненты через Redux",
          "Реализация диспетчеризации действий в компонентах"
        ]
      },
      {
        name: "Реактивное состояние и оптимизация",
        lessons: [
          "Оптимизация производительности в React с Redux",
          "Избежание лишних ререндеров с помощью mapStateToProps",
          "Использование React.memo и useMemo для оптимизации",
          "Избежание неэффективных подписок с помощью useSelector",
          "Redux-DevTools: анализ и оптимизация состояния"
        ]
      },
      {
        name: "Нормализация состояния и обработка коллекций",
        lessons: [
          "Как работать с коллекциями в Redux: массивы и объекты",
          "Нормализация данных в Redux Store",
          "Использование библиотеки normalizr для нормализации данных",
          "Хранение данных в виде нормализованных объектов",
          "Обработка больших коллекций и связь объектов"
        ]
      },
      {
        name: "Продвинутые техники Redux",
        lessons: [
          "Модульность в Redux: разбивка состояния на отдельные модули",
          "Реализация паттерна «Фича» в Redux (Feature-Based Architecture)",
          "Механизмы загрузки и кэширования данных в Redux",
          "Реализация Undo/Redo функционала в Redux",
          "Создание собственных мидлваров для улучшения функциональности"
        ]
      },
      {
        name: "Реализация Redux в крупных приложениях",
        lessons: [
          "Работа с несколькими редьюсерами и сложным состоянием",
          "Реализация асинхронных операций с помощью Redux Saga и Thunk",
          "Подключение маршрутизации с помощью React Router и Redux",
          "Использование Redux для глобального состояния приложения",
          "Работа с глобальными состояниями в приложениях с компонентами UI"
        ]
      },
      {
        name: "Тестирование Redux",
        lessons: [
          "Основы тестирования Redux-редьюсеров",
          "Тестирование асинхронных действий с использованием Jest и Redux Thunk",
          "Мока тестирование с Redux",
          "Тестирование компонентов, подключенных к Redux",
          "Использование Redux DevTools для отладки и тестирования"
        ]
      },
      {
        name: "Реализация Middleware с Redux",
        lessons: [
          "Что такое Redux middleware и когда их использовать?",
          "Простое middleware для логирования действий",
          "Создание мидлвара для работы с асинхронными запросами",
          "Использование мидлваров для оптимизации состояния приложения",
          "Конфигурация и отладка пользовательских мидлваров"
        ]
      },
      {
        name: "Современные подходы в Redux",
        lessons: [
          "Использование Redux Toolkit для упрощения работы с Redux",
          "Снижение сложности кода с Redux Toolkit: createSlice, createAsyncThunk",
          "Реализация TypeScript с Redux Toolkit",
          "Обработка ошибок и асинхронных операций с Redux Toolkit",
          "Переход от классовых компонентов к функциональным с Redux"
        ]
      },
      {
        name: "Финальные шаги",
        lessons: [
          "Оптимизация Redux-приложений",
          "Использование дебаггера для отслеживания состояния",
          "Миграция Redux приложения на другой слой архитектуры",
          "Документирование Redux приложения",
          "Лучшие практики работы с Redux в реальных проектах"
        ]
      }
    ],
    firebase: [
      {
        name: "Основы Firebase",
        lessons: [
          "Что такое Firebase? Введение в Firebase и его возможности",
          "Как создать аккаунт и проект в Firebase",
          "Подключение Firebase к вашему веб-приложению",
          "Настройка Firebase в проекте: Firebase SDK и конфигурация",
          "Что такое Firebase Console и как им пользоваться"
        ]
      },
      {
        name: "Firebase Realtime Database",
        lessons: [
          "Что такое Firebase Realtime Database?",
          "Как настроить Firebase Realtime Database в проекте",
          "Чтение данных из Realtime Database",
          "Запись данных в Realtime Database",
          "Структура данных и правила безопасности базы данных",
          "Работа с запросами и фильтрацией данных",
          "Обновление и удаление данных",
          "Работа с данными в реальном времени (Listeners)",
          "Работа с оффлайн-режимом в Firebase"
        ]
      },
      {
        name: "Cloud Firestore",
        lessons: [
          "Что такое Firebase Cloud Firestore и как он отличается от Realtime Database?",
          "Настройка и подключение Cloud Firestore",
          "Основные принципы Cloud Firestore: коллекции и документы",
          "Чтение и запись данных в Cloud Firestore",
          "Структура данных: вложенные коллекции и документы",
          "Запросы в Cloud Firestore: фильтрация, сортировка, пагинация",
          "Использование транзакций и батч-запросов",
          "Правила безопасности Cloud Firestore",
          "Обработка ошибок и отладка запросов"
        ]
      },
      {
        name: "Firebase Authentication",
        lessons: [
          "Что такое Firebase Authentication и как его настроить?",
          "Регистрация и авторизация пользователей с использованием Firebase",
          "Поддержка различных провайдеров аутентификации: email, Google, Facebook, GitHub и других",
          "Работа с пользовательскими данными и создание профиля пользователя",
          "Подтверждение email-адреса и сброс пароля",
          "Реализация авторизации с помощью анонимных пользователей",
          "Настройка многократных методов аутентификации",
          "Управление сессиями пользователей и их выход из системы",
          "Обработка ошибок при аутентификации"
        ]
      },
      {
        name: "Firebase Cloud Messaging (FCM)",
        lessons: [
          "Что такое Firebase Cloud Messaging (FCM) и как он работает?",
          "Настройка Firebase Cloud Messaging в проекте",
          "Отправка сообщений через Firebase Cloud Messaging",
          "Управление уведомлениями и настройка их параметров",
          "Группировка уведомлений и приоритет сообщений",
          "Слушатели уведомлений в браузере и мобильных устройствах",
          "Обработка уведомлений в фоне и в активном режиме",
          "Реализация уведомлений для различных платформ (Android, iOS, Web)",
          "Пример реализации push-уведомлений с использованием FCM"
        ]
      },
      {
        name: "Firebase Storage",
        lessons: [
          "Что такое Firebase Storage и для чего он используется?",
          "Настройка Firebase Storage в проекте",
          "Загрузка файлов в Firebase Storage",
          "Скачивание файлов из Firebase Storage",
          "Правила безопасности Firebase Storage",
          "Обработка больших файлов: загрузка и скачивание",
          "Управление метаданными файлов",
          "Просмотр и удаление файлов из Firebase Storage",
          "Оптимизация работы с Firebase Storage для мобильных приложений"
        ]
      },
      {
        name: "Firebase Hosting",
        lessons: [
          "Что такое Firebase Hosting и как он работает?",
          "Создание и настройка проекта для Firebase Hosting",
          "Размещение статических файлов на Firebase Hosting",
          "Работа с доменами и настройка SSL-сертификатов",
          "Настройка правил перезаписи и редиректов",
          "Настройка индексации и кэширования на Firebase Hosting",
          "Использование Firebase Hosting с динамическим контентом",
          "Развертывание приложения с помощью Firebase CLI",
          "Мониторинг и логирование на Firebase Hosting"
        ]
      },
      {
        name: "Firebase Functions",
        lessons: [
          "Что такое Firebase Functions и как они работают?",
          "Создание и развертывание облачных функций в Firebase",
          "Обработка HTTP-запросов с помощью Firebase Functions",
          "Работа с Firebase Realtime Database и Firestore через Cloud Functions",
          "Отправка сообщений с помощью Firebase Cloud Messaging через Functions",
          "Использование Triggers: вызовы при изменении данных в базе",
          "Использование Functions для обработки форм и валидации данных",
          "Использование Firebase Functions с другими Google Cloud сервисами",
          "Тестирование и отладка Firebase Functions"
        ]
      },
      {
        name: "Firebase Analytics",
        lessons: [
          "Что такое Firebase Analytics и как оно работает?",
          "Настройка Firebase Analytics в проекте",
          "Сбор событий и параметров в Firebase Analytics",
          "Просмотр отчетов и аналитических данных в Firebase Console",
          "Использование аудитории для сегментации пользователей",
          "Интеграция с Google Analytics для расширенной аналитики",
          "Создание собственных событий и пользовательских отчетов",
          "Мониторинг и оптимизация производительности с помощью Analytics",
          "Использование Firebase Analytics для A/B тестирования"
        ]
      },
      {
        name: "Firebase Crashlytics",
        lessons: [
          "Что такое Firebase Crashlytics и как настроить проект?",
          "Интеграция Crashlytics в мобильные приложения (Android, iOS)",
          "Сбор и анализ отчетов о сбоях",
          "Отслеживание ошибок и исключений в приложении",
          "Как использовать Crashlytics для отладки приложений в реальном времени",
          "Использование Crashlytics для определения причин сбоев",
          "Сегментация сбоев по пользователям и устройствам",
          "Использование custom keys для дополнения отчетов о сбоях",
          "Пример анализа и исправления ошибок с помощью Crashlytics"
        ]
      },
      {
        name: "Firebase Test Lab",
        lessons: [
          "Что такое Firebase Test Lab и как оно помогает тестировать приложения?",
          "Создание и настройка тестов с использованием Firebase Test Lab",
          "Проведение автоматических тестов для Android и iOS приложений",
          "Настройка тестов для различных устройств и конфигураций",
          "Просмотр отчетов о тестах и ошибок в Firebase Test Lab",
          "Использование Firebase Test Lab для CI/CD процессов",
          "Интеграция с другими инструментами тестирования и CI/CD пайплайнами",
          "Обработка и устранение ошибок на основе данных Test Lab",
          "Автоматизация тестирования приложений с помощью Firebase Test Lab"
        ]
      },
      {
        name: "Firebase Security Rules",
        lessons: [
          "Что такое Firebase Security Rules и как они работают?",
          "Настройка и управление безопасностью Firebase Database и Firestore",
          "Разработка правил безопасности для различных типов данных",
          "Аутентификация и авторизация в Firebase Security Rules",
          "Использование кастомных атрибутов и проверок в правилах безопасности",
          "Работа с правилами доступа к файлам в Firebase Storage",
          "Оптимизация и тестирование правил безопасности",
          "Отладка и диагностика правил безопасности Firebase",
          "Решение распространенных проблем безопасности Firebase"
        ]
      },
      {
        name: "Firebase для реальных проектов",
        lessons: [
          "Создание полнофункционального приложения с использованием Firebase",
          "Интеграция Firebase с фреймворками и библиотеками (React, Angular, Vue.js)",
          "Работа с Firebase в реальных условиях: отладка, тестирование, мониторинг",
          "Оптимизация производительности Firebase в больших проектах",
          "Проектирование архитектуры данных для Firebase",
          "Работа с Firebase в многопользовательских приложениях",
          "Использование Firebase для создания многослойной аутентификации и авторизации",
          "Реализация push-уведомлений, реального времени и аналитики",
          "Как масштабировать приложение с использованием Firebase"
        ]
      }
    ]
    
    
  }